var x=Object.defineProperty;var w=(n,t,e)=>t in n?x(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var d=(n,t,e)=>w(n,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=e(i);fetch(i.href,a)}})();const c=class c{constructor(t){this.player=t}checkLevelUp(){const t=Math.floor(this.player.xp/c.XP_PER_LEVEL);t>this.player.level&&this._levelUp(t)}_levelUp(t){const s=(t-this.player.level)*c.FORCE_PER_LEVEL;this.player.level=t,this.player.force+=s,document.dispatchEvent(new CustomEvent("playerLevelUp",{detail:{level:t,forceGained:s}}))}};d(c,"XP_PER_LEVEL",10),d(c,"FORCE_PER_LEVEL",3);let u=c;class g{constructor(){this._maxHp=10,this._force=3,this._xp=0,this.hp=this._maxHp,this.force=this._force,this.xp=this._xp,this._x=0,this._y=0,this._level=1,this.levelSystem=new u(this)}get maxHp(){return this._maxHp}set maxHp(t){this._maxHp=t}get hp(){return this._hp}set hp(t){this._hp=Math.max(0,Math.min(t,this._maxHp)),document.dispatchEvent(new CustomEvent("playerStatsUpdated",{detail:{stat:"hp",value:this._hp}}))}get force(){return this._force}set force(t){this._force=t,document.dispatchEvent(new CustomEvent("playerStatsUpdated",{detail:{stat:"force",value:this._force}}))}_dispatchStatsUpdate(t){document.dispatchEvent(new CustomEvent("playerStatsUpdated",{detail:{stat:t,value:this[`_${t}`]}}))}get position(){return{x:this._x,y:this._y}}setPosition(t){this._x=t.x,this._y=t.y}spawn(t,e){t[this._y][this._x]="player",e.updateCell(this._x,this._y,"player")}get xp(){return this._xp}set xp(t){this._xp=t}gainXP(t){this.xp=this._xp+t}get level(){return this._level}set level(t){this._level=t,this._dispatchStatsUpdate("level")}}class f{constructor(){this.name="Goblin",this.hp=3,this.force=2,this.xpValue=1,this.type="goblin"}}class E{constructor(){this.name="Ogre",this.hp=6,this.force=3,this.xpValue=6,this.type="ogre"}}class p{constructor(){this.name="Dragon",this.hp=12,this.force=9,this.xpValue=20,this.type="dragon"}}class y{static _getEmptyCells(t){const e=[];for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]||e.push({x:i,y:s});return e}static spawn(t,e){const s=this._getEmptyCells(t);if(s.length===0)return;const i=this._shuffle([...s]);let a=!1;if(Math.random()<=this.DRAGON_SPAWN_CHANCE&&i.length>0){const r=i.pop();t[r.y][r.x]=new p,e.updateCell(r.x,r.y,"dragon"),a=!0}const o=Math.min(i.length,Math.floor(Math.random()*(this.SPAWN_RANGE.max-this.SPAWN_RANGE.min+1))+this.SPAWN_RANGE.min);for(let r=0;r<o&&i.length>0;r++){const{x:l,y:m}=i.pop(),_=this._getRandomMonsterType();t[m][l]=new _,e.updateCell(l,m,t[m][l].type)}console.log(`[Spawner] ${a?"Dragon + ":""}${o} monstres générés`)}static _shuffle(t){for(let e=t.length-1;e>0;e--){const s=Math.floor(Math.random()*(e+1));[t[e],t[s]]=[t[s],t[e]]}return t}static _getRandomMonsterType(){const t={Goblin:.75,Ogre:.25};return Math.random()<t.Goblin?f:E}}d(y,"SPAWN_RANGE",{min:10,max:50}),d(y,"DRAGON_SPAWN_CHANCE",1);class L{constructor(t,e,s){this.player=t,this.stateMatrix=e,this.onMove=s}initArrowListeners(){document.querySelectorAll(".arrow-btn").forEach(t=>{t.addEventListener("click",e=>{const s=e.target.dataset.direction;this.handleMove(s)})})}handleMove(t){const e=this._calculateNewPosition(t);this._isValidPosition(e)&&this._updatePosition(e)}_calculateNewPosition(t){const{x:e,y:s}=this.player.position;return{up:{x:e,y:s-1},down:{x:e,y:s+1},left:{x:e-1,y:s},right:{x:e+1,y:s}}[t]}_isValidPosition(t){return t.x>=0&&t.x<8&&t.y>=0&&t.y<10}_updatePosition(t){const e=this.player.position,s=this.stateMatrix[t.y][t.x];s!=null&&s.type||(this.stateMatrix[e.y][e.x]=null,this.stateMatrix[t.y][t.x]="player"),this.player.setPosition(t),this.onMove(e,t)}}class C{constructor(t){this.container=document.getElementById(t),this.grid=null}generateGrid(){this.grid=document.createElement("div"),this.grid.className="game-grid";for(let t=0;t<10;t++)for(let e=0;e<8;e++){const s=document.createElement("div");s.className="grid-cell",s.dataset.x=e,s.dataset.y=t,this.grid.appendChild(s)}this.container.appendChild(this.grid)}updateCell(t,e,s){const i=this.grid.querySelector(`[data-x="${t}"][data-y="${e}"]`);if(!i){console.error(`Cell not found at ${t},${e}`);return}switch(i.className="grid-cell",s){case"player":i.classList.add("player-cell");break;case"goblin":case"ogre":case"dragon":i.classList.add("enemy-cell",s);break;default:i.classList.add("empty-cell")}}}class b{static createArrowControls(t){const e=document.getElementById(t),s={up:"↑",left:"←",right:"→",down:"↓"};e.innerHTML=`
      <div class="controls-grid">
        <button class="arrow-btn" data-direction="up" style="grid-area: up">${s.up}</button>
        <button class="arrow-btn" data-direction="left" style="grid-area: left">${s.left}</button>
        <button class="arrow-btn" data-direction="right" style="grid-area: right">${s.right}</button>
        <button class="arrow-btn" data-direction="down" style="grid-area: down">${s.down}</button>
      </div>
    `}}class M{static init(){this.logEntries=[],this.playerStats={hp:0,xp:0,force:0},document.addEventListener("playerStatsUpdated",t=>{this.playerStats[t.detail.stat]=t.detail.value,t.detail.stat==="level"&&this.logEntries.push(`Niveau ${t.detail.value} atteint!`)}),document.addEventListener("combatLogEntry",t=>{this.logEntries.push(t.detail)})}static getLogs(){return[...this.logEntries]}static getPlayerStats(){return{...this.playerStats}}}class v{static init(){this.statsContainer=document.querySelector(".stats-display"),document.addEventListener("playerStatsUpdated",()=>this.updateDisplay()),document.addEventListener("playerLevelUp",t=>this.onLevelUp(t.detail))}static updateDisplay(){const t=this.getPlayerStats();this.statsContainer.innerHTML=`
            PV: ${t.hp} | 
            Niveau: ${t.level} |
            XP: ${t.xp} | 
            Force: ${t.force}
        `}static getPlayerStats(){var t,e,s,i,a,o,r,l;return{hp:((e=(t=window.gameState)==null?void 0:t.player)==null?void 0:e._hp)||0,xp:((i=(s=window.gameState)==null?void 0:s.player)==null?void 0:i._xp)||0,force:((o=(a=window.gameState)==null?void 0:a.player)==null?void 0:o._force)||0,level:((l=(r=window.gameState)==null?void 0:r.player)==null?void 0:l._level)||1}}static onLevelUp({level:t,forceGained:e}){const s=`Niveau ${t} atteint ! +${e} Force`;document.dispatchEvent(new CustomEvent("combatLogEntry",{detail:s}))}}class h{static async init(){h.uiElement=document.getElementById("combat-ui"),h.uiElement.innerHTML=`
          <div class="stats-display"></div>
          <div class="combat-logs" style="max-height: 300px; overflow-y: auto"></div>
      `,v.init(),v.updateDisplay(),document.addEventListener("combatLogEntry",t=>this.addLogEntry(t.detail))}static addLogEntry(t){const e=h.uiElement.querySelector(".combat-logs"),s=document.createElement("div");s.textContent=t,e.appendChild(s),e.scrollTop=e.scrollHeight}}class S{constructor(t,e){this.player=t,this.monster=e,this.logs=[],this.levelSystem=new u(t)}resolve(){let t={victoire:!1,playerDead:!1,monsterType:this.monster.type};for(;this.player.hp>0&&this.monster.hp>0;){const e=Number(this.player.force);if(this.monster.hp-=e,this._dispatchLog(`Joueur attaque: ${this.monster.name} -${e}PV 
                (reste ${this.monster.hp})`),this.monster.hp<=0)break;const s=Number(this.monster.force);this.player.hp=Math.max(this.player.hp-s,0),this._dispatchLog(`${this.monster.name} attaque: Joueur -${s}PV 
                (reste ${this.player.hp})`)}return t.victoire=this.monster.hp<=0,t.playerDead=this.player.hp<=0,t.victoire&&(this._dispatchLog(`Gain de ${this.monster.xpValue} XP!`),this.player.xp+=this.monster.xpValue,this.monster.type!=="dragon"&&(this.player.hp=this.player.maxHp),this.levelSystem.checkLevelUp()),this._dispatchLog("-------------------------"),document.dispatchEvent(new CustomEvent("combatOutcome",{detail:t})),t}_dispatchLog(t){this.logs.push(t),document.dispatchEvent(new CustomEvent("combatLogEntry",{detail:t}))}}class P{static init(t){document.addEventListener("playerMoved",e=>{const{oldPos:s,newPos:i,monster:a}=e.detail;(a instanceof f||a instanceof E||a instanceof p)&&(new S(t.player,a).resolve().victoire?(t.stateMatrix[i.y][i.x]="player",t.map.updateCell(s.x,s.y,"empty"),t.map.updateCell(i.x,i.y,"player"),a.xpValue>0&&t.player.gainXP(a.xpValue),a instanceof p&&document.dispatchEvent(new CustomEvent("dragonSlain")),document.dispatchEvent(new CustomEvent("combatWon",{detail:{monster:a,player:t.player}}))):(t.stateMatrix[s.y][s.x]=null,t.map.updateCell(s.x,s.y,"empty"),document.dispatchEvent(new CustomEvent("gameOver",{detail:{vsDragon:a instanceof p}}))))})}}class N{constructor(){this.modal=document.createElement("div"),this.modal.id="endgame-modal",this.modal.className="endgame-modal",document.body.appendChild(this.modal),this._bindEvents()}_bindEvents(){this.modal.addEventListener("click",t=>{t.target.id==="restart-btn"&&window.location.reload()})}show(t,e){this.modal.innerHTML=`
        <div class="endgame-content">
          <h2>${t}</h2>
          <p>${e}</p>
          <button id="restart-btn">↻ Recommencer</button>
        </div>
      `,this.modal.style.display="flex"}hide(){this.modal.style.display="none"}}class ${static checkEndgame(t){return t.hp<=0?"game-over":t.level>=3?"victory":!1}}class A{constructor(){this.stateMatrix=Array(10).fill().map(()=>Array(8).fill(null)),this.map=new C("map"),this.player=new g,this.ui=b,this.endgameUI=new N}async setup(){return window.gameState={player:this.player},M.init(),await h.init(),P.init(this),this.movement=new L(this.player,this.stateMatrix,(t,e)=>this._handlePositionUpdate(t,e)),this._initEventListeners(),this.init(),this}init(){this.map.generateGrid(),this.ui.createArrowControls("player-ui"),this.movement.initArrowListeners(),this._spawnEntities()}_initEventListeners(){document.addEventListener("combatWon",t=>{const{x:e,y:s}=this.player.position;this.stateMatrix[s][e]="player",this.map.updateCell(e,s,"player")}),document.addEventListener("gameOver",()=>{console.log("Game Over!"),this.endgameUI.show("Défaite","Le dragon vous a réduit en cendre!"),this._disableControls()}),document.addEventListener("dragonSlain",()=>{$.checkEndgame(this.player,{type:"dragon"})==="victory"&&(this.endgameUI.show("VICTOIRE","Le dragon est vaincu son trésort vous appartiens !"),this._disableControls())}),document.addEventListener("playerStatsUpdated",()=>{window.gameState={player:this.player}})}_spawnEntities(){this.player.spawn(this.stateMatrix,this.map),y.spawn(this.stateMatrix,this.map)}_handlePositionUpdate(t,e){const s=this.stateMatrix[e.y][e.x];s!=null&&s.type?document.dispatchEvent(new CustomEvent("playerMoved",{detail:{oldPos:t,newPos:e,monster:s}})):this._updateGameState(t,e)}_updateGameState(t,e){this.map.updateCell(t.x,t.y,"empty"),this.map.updateCell(e.x,e.y,"player")}_disableControls(){this.movement.arrowControls.forEach(t=>t.style.pointerEvents="none"),document.removeEventListener("keydown",this.movement.handleKeyPress)}getState(){return{player:this.player,matrix:this.stateMatrix,map:this.map}}reset(){this.stateMatrix=Array(10).fill().map(()=>Array(8).fill(null)),this.player=new g,window.gameState={player:this.player},this.init()}}async function G(){await new A().setup()}G().catch(n=>console.error("Erreur au démarrage:",n));
